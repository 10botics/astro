---
// FAQ accordion section - Tailwind UI pattern
export interface Props {
  title: string;
  subtitle: string;
  description: string;
  faqs: Array<{
    question: string;
    answer: string;
  }>;
}

const { title, subtitle, description, faqs } = Astro.props;
---

<section class="bg-white">
  <div class="mx-auto max-w-7xl px-6 py-24 sm:py-32 lg:px-8 lg:py-40">
    <div class="mx-auto max-w-4xl divide-y divide-gray-900/10">
      <div class="text-center">
        <h2 class="text-base font-semibold leading-7 text-blue-600">{subtitle}</h2>
        <p class="mt-2 text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">{title}</p>
        <p class="mt-6 text-lg leading-8 text-gray-600">{description}</p>
      </div>
      
      <dl class="mt-16 space-y-6 divide-y divide-gray-900/10">
        {faqs.map((faq, index) => (
          <div class="pt-6">
            <dt>
              <button type="button" class="flex w-full items-start justify-between text-left text-gray-900 faq-button" aria-controls={`faq-${index}`} aria-expanded="true">
                <span class="text-base font-semibold leading-7">{faq.question}</span>
                <span class="ml-6 flex h-7 items-center">
                  <svg class="h-6 w-6 faq-icon" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M18 12H6" />
                  </svg>
                </span>
              </button>
            </dt>
            <dd class="mt-2 pr-12 faq-answer" id={`faq-${index}`}>
              <p class="text-base leading-7 text-gray-600">{faq.answer}</p>
            </dd>
          </div>
        ))}
      </dl>
    </div>
  </div>
</section>

<script>
  // FAQ accordion functionality
  document.addEventListener('DOMContentLoaded', function() {
    const buttons = document.querySelectorAll('.faq-button');
    
    buttons.forEach(button => {
      button.addEventListener('click', () => {
        const expanded = button.getAttribute('aria-expanded') === 'true';
        const targetId = button.getAttribute('aria-controls');
        if (!targetId) return;
        
        const answer = document.getElementById(targetId);
        const icon = button.querySelector('.faq-icon');
        
        // Close all other FAQs
        buttons.forEach(otherButton => {
          if (otherButton !== button) {
            otherButton.setAttribute('aria-expanded', 'false');
            const otherId = otherButton.getAttribute('aria-controls');
            if (!otherId) return;
            
            const otherAnswer = document.getElementById(otherId);
            const otherIcon = otherButton.querySelector('.faq-icon');
            
            if (otherAnswer) otherAnswer.classList.add('hidden');
            if (otherIcon) otherIcon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" d="M12 6v12m6-6H6" />';
          }
        });
        
        // Toggle current FAQ
        if (!expanded) {
          button.setAttribute('aria-expanded', 'true');
          if (answer) answer.classList.remove('hidden');
          if (icon) icon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" d="M18 12H6" />';
        } else {
          button.setAttribute('aria-expanded', 'false');
          if (answer) answer.classList.add('hidden');
          if (icon) icon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" d="M12 6v12m6-6H6" />';
        }
      });
    });
    
    // Open all FAQs by default
    buttons.forEach(button => {
      button.setAttribute('aria-expanded', 'true');
      const targetId = button.getAttribute('aria-controls');
      if (!targetId) return;
      
      const answer = document.getElementById(targetId);
      const icon = button.querySelector('.faq-icon');
      
      if (answer) answer.classList.remove('hidden');
      if (icon) icon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" d="M18 12H6" />';
    });
  });
</script> 