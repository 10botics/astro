---
import { extractSERPData } from '../utils/serpDataExtractor.ts';

export interface Props {
  domain?: string;
}

const { domain = "" } = Astro.props;

// Extract real data from the codebase
const websitePages = await extractSERPData();
---

<div class="google-search-parser">
  <div class="search-form">
    <h3 class="text-xl font-semibold mb-4 text-gray-800">Website Content Search</h3>
    <p class="text-gray-600 mb-4">
      Search for content from this website. Enter domain names, keywords, or content types to see relevant pages and their SERP-optimized information.
    </p>
    
    <div class="search-input-group">
      <label for="domain-input" class="block text-sm font-medium text-gray-700 mb-2">
        Search Query
      </label>
      <input
        type="text"
        id="domain-input"
        placeholder="Enter search terms (e.g., AI, Minecraft, 無人機, 課程)"
        class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
      />
    </div>
    
    <button
      onclick="searchPages()"
      class="mt-4 px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors"
    >
      Search Pages
    </button>
  </div>

  <div class="search-results mt-8">
    <h4 class="text-lg font-semibold mb-4 text-gray-800">Search Results</h4>
    <div id="results-container" class="space-y-4">
      <!-- Results will be populated here -->
    </div>
  </div>
</div>

<script>
  const websitePages = JSON.parse('{JSON.stringify(websitePages)}');
  
  // Debug: Log the data when the page loads
  console.log('Website pages loaded:', websitePages.length);
  console.log('First few pages:', websitePages.slice(0, 3));
  
  function searchPages() {
    const query = document.getElementById('domain-input').value.trim();
    const resultsContainer = document.getElementById('results-container');
    
    if (!query) {
      resultsContainer.innerHTML = '<p class="text-gray-500">Please enter a search query.</p>';
      return;
    }
    
    // Debug: Log the search query and some sample URLs
    console.log('Search query:', query);
    console.log('Total pages in data:', websitePages.length);
    console.log('Sample URLs in data:', websitePages.slice(0, 3).map(p => ({ title: p.title, url: p.url, category: p.category })));
    console.log('All categories in data:', [...new Set(websitePages.map(p => p.category))]);
    console.log('School course pages:', websitePages.filter(p => p.category === 'courses').map(p => ({ title: p.title, url: p.url })));
    
    const results = searchSERPData(websitePages, query);
    
    if (results.length === 0) {
      resultsContainer.innerHTML = '<p class="text-gray-500">No results found for your search query.</p>';
      return;
    }
    
    const resultsHTML = results.map(page => `
      <div class="bg-white border border-gray-200 rounded-lg p-4 shadow-sm">
        <div class="flex items-start justify-between mb-2">
          <span class="text-xs text-gray-500">#${page.position}</span>
        </div>
        
        <h5 class="font-semibold text-gray-900 mb-2">
          <a href="${page.url}" target="_blank" rel="noopener noreferrer" class="hover:text-blue-600 transition-colors">
            ${page.metaTitle || page.title}
          </a>
        </h5>
        
        <p class="text-sm text-gray-600 mb-3">
          ${page.metaDescription || page.description}
        </p>
        
        ${page.tags && page.tags.length > 0 ? `
          <div class="mt-3 pt-3 border-t border-gray-100">
            <div class="flex flex-wrap gap-1">
              ${page.tags.map(tag => `
                <span class="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-gray-100 text-gray-800">
                  ${tag}
                </span>
              `).join('')}
            </div>
          </div>
        ` : ''}
        
        ${page.publishDate ? `
          <div class="mt-3 text-xs text-gray-500">
            Published: ${new Date(page.publishDate).toLocaleDateString()}
          </div>
        ` : ''}
      </div>
    `).join('');
    
    resultsContainer.innerHTML = resultsHTML;
  }
  
  function searchSERPData(data, query) {
    const cleanQuery = query.toLowerCase().trim();
    
    if (!cleanQuery) {
      return data.slice(0, 8);
    }

    // If searching for domain, return main pages
    if (cleanQuery.includes('10botics') || cleanQuery.includes('10education') || cleanQuery === '10botics.com') {
      return data.slice(0, 8);
    }

    // Search by keywords in title, description, meta tags, tags, and URL
    const results = data.filter(page => {
      const titleMatch = page.title.toLowerCase().includes(cleanQuery);
      const descMatch = page.description.toLowerCase().includes(cleanQuery);
      const categoryMatch = page.category.toLowerCase().includes(cleanQuery);
      const tagMatch = page.tags?.some(tag => tag.toLowerCase().includes(cleanQuery));
      const metaTitleMatch = page.metaTitle?.toLowerCase().includes(cleanQuery);
      const metaDescMatch = page.metaDescription?.toLowerCase().includes(cleanQuery);
      const metaKeywordsMatch = page.metaKeywords?.toLowerCase().includes(cleanQuery);
      
      // URL matching - handle both full URLs and path segments
      let urlMatch = false;
      if (page.url) {
        const cleanUrl = page.url.toLowerCase();
        // Check if query matches the full URL
        urlMatch = cleanUrl.includes(cleanQuery);
        // Also check if query matches just the path part (after domain)
        if (!urlMatch && cleanQuery.startsWith('/')) {
          const urlPath = cleanUrl.split('10botics.com')[1] || cleanUrl.split('10education.com')[1] || '';
          urlMatch = urlPath.includes(cleanQuery);
        }
        // Check if query matches just the slug part
        if (!urlMatch) {
          const urlSlug = cleanUrl.split('/').pop() || '';
          urlMatch = urlSlug.includes(cleanQuery.replace(/^\/+|\/+$/g, ''));
        }
      }
      
      // Debug logging for URL search
      if (cleanQuery.includes('school-courses') || cleanQuery.includes('ai-enrichment')) {
        console.log('Page being checked:', {
          title: page.title,
          url: page.url,
          category: page.category,
          urlMatch,
          cleanQuery
        });
      }
      
      return titleMatch || descMatch || categoryMatch || tagMatch || 
             metaTitleMatch || metaDescMatch || metaKeywordsMatch || urlMatch;
    });

    // If no direct matches, try partial matches for common terms
    if (results.length === 0) {
      const partialResults = data.filter(page => {
        if (cleanQuery.includes('ai') || cleanQuery.includes('人工智能')) {
          return page.title.includes('AI') || page.title.includes('人工智能') || 
                 page.description.includes('AI') || page.description.includes('人工智能') ||
                 page.metaTitle?.includes('AI') || page.metaTitle?.includes('人工智能') ||
                 page.metaDescription?.includes('AI') || page.metaDescription?.includes('人工智能');
        }
        if (cleanQuery.includes('minecraft')) {
          return page.title.includes('Minecraft') || 
                 page.description.includes('Minecraft') ||
                 page.metaTitle?.includes('Minecraft') ||
                 page.metaDescription?.includes('Minecraft');
        }
        if (cleanQuery.includes('drone') || cleanQuery.includes('無人機')) {
          return page.title.includes('無人機') || page.title.includes('CoDrone') ||
                 page.description.includes('無人機') || page.description.includes('drone') ||
                 page.metaTitle?.includes('無人機') || page.metaTitle?.includes('drone') ||
                 page.metaDescription?.includes('無人機') || page.metaDescription?.includes('drone');
        }
        if (cleanQuery.includes('course') || cleanQuery.includes('課程')) {
          return page.category === 'courses';
        }
        if (cleanQuery.includes('competition') || cleanQuery.includes('比賽')) {
          return page.category === 'competition';
        }
        return false;
      });
      return partialResults.slice(0, 6);
    }

    return results.slice(0, 8);
  }
  
  // Add event listener for Enter key
  document.getElementById('domain-input').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      searchPages();
    }
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .google-search-parser {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }
  
  .search-form {
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    padding: 2rem;
    border-radius: 12px;
    border: 1px solid #e2e8f0;
  }
  
  .search-input-group input {
    transition: all 0.2s ease-in-out;
  }
  
  .search-input-group input:focus {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.15);
  }
  
  .search-results {
    background: #f8fafc;
    padding: 1.5rem;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
  }
  
  .all-pages {
    background: #f8fafc;
    padding: 1.5rem;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
  }
</style>