---
export interface Props {
  domain?: string;
}

const { domain = "" } = Astro.props;
---

<div class="google-search-parser">
  <div class="search-form">
    <h3 class="text-xl font-semibold mb-4 text-gray-800">Current SERP Results</h3>
    <p class="text-gray-600 mb-4">
      Enter your domain to see how your pages currently appear in Google search results.
    </p>
    
    <div class="search-input-group">
      <label for="domain-input" class="block text-sm font-medium text-gray-700 mb-2">
        Website Domain
      </label>
      <div class="flex gap-2">
        <input
          type="text"
          id="domain-input"
          class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          placeholder="example.com"
          value={domain}
        />
        <button
          id="search-btn"
          class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors"
        >
          Search
        </button>
      </div>
      <div class="text-xs text-gray-500 mt-1">
        Enter domain without "https://" (e.g., "example.com")
      </div>
    </div>
  </div>

  <div id="search-results" class="search-results hidden">
    <div class="results-header mb-4">
      <h4 class="text-lg font-semibold text-gray-800">Live SERP Results</h4>
      <p class="text-sm text-gray-600">Current search appearance for your domain</p>
    </div>
    
    <div id="results-container" class="space-y-4">
      <!-- Results will be populated here -->
    </div>
    
    <div id="loading-state" class="loading-state hidden">
      <div class="flex items-center justify-center py-8">
        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        <span class="ml-3 text-gray-600">Searching...</span>
      </div>
    </div>
    
    <div id="no-results" class="no-results hidden">
      <div class="text-center py-8 text-gray-500">
        <svg class="mx-auto h-12 w-12 text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.29-1.045-5.709-2.709M15 6.39A7.962 7.962 0 0112 5c-2.34 0-4.29 1.045-5.709 2.709"></path>
        </svg>
        <p class="text-lg font-medium">No results found</p>
        <p class="text-sm">Try searching for a different domain or check if the website is indexed by Google.</p>
      </div>
    </div>
  </div>

  <div class="comparison-view hidden" id="comparison-view">
    <div class="mt-8 p-4 bg-blue-50 border border-blue-200 rounded-lg">
      <h4 class="text-lg font-semibold text-blue-900 mb-2">ðŸ’¡ Optimization Tips</h4>
      <div id="optimization-tips" class="text-sm text-blue-800 space-y-1">
        <!-- Tips will be populated dynamically -->
      </div>
    </div>
  </div>
</div>

<style>
  .search-results {
    margin-top: 2rem;
    padding: 1.5rem;
    background: #f9fafb;
    border-radius: 8px;
    border: 1px solid #e5e7eb;
  }

  .serp-result {
    background: white;
    border-radius: 6px;
    padding: 1rem;
    border: 1px solid #e5e7eb;
    font-family: arial, sans-serif;
  }

  .serp-result-url {
    color: #1a73e8;
    font-size: 14px;
    line-height: 1.3;
    margin-bottom: 0.25rem;
  }

  .serp-result-title {
    color: #1a0dab;
    font-size: 20px;
    line-height: 1.3;
    margin-bottom: 0.25rem;
    text-decoration: none;
    word-wrap: break-word;
  }

  .serp-result-title:hover {
    text-decoration: underline;
  }

  .serp-result-description {
    color: #4d5156;
    font-size: 14px;
    line-height: 1.4;
    word-wrap: break-word;
  }

  .result-stats {
    display: flex;
    justify-content: space-between;
    margin-top: 0.5rem;
    font-size: 12px;
    color: #6b7280;
  }

  .stat-item {
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  .status-indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
  }

  .status-good { background-color: #10b981; }
  .status-warning { background-color: #f59e0b; }
  .status-error { background-color: #ef4444; }
</style>

<script>
  const domainInput = document.getElementById('domain-input') as HTMLInputElement;
  const searchBtn = document.getElementById('search-btn') as HTMLButtonElement;
  const searchResults = document.getElementById('search-results') as HTMLElement;
  const resultsContainer = document.getElementById('results-container') as HTMLElement;
  const loadingState = document.getElementById('loading-state') as HTMLElement;
  const noResults = document.getElementById('no-results') as HTMLElement;
  const comparisonView = document.getElementById('comparison-view') as HTMLElement;
  const optimizationTips = document.getElementById('optimization-tips') as HTMLElement;

  interface SERPResult {
    title: string;
    url: string;
    description: string;
    position: number;
  }

  // Mock function to simulate Google search results
  // In a real implementation, you'd use a proper search API
  async function fetchSERPResults(domain: string): Promise<SERPResult[]> {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // Mock data - in reality, you'd call a search API like SerpAPI, ScrapingBee, etc.
    const mockResults: SERPResult[] = [
      {
        title: `${domain} - Official Website`,
        url: `https://${domain}`,
        description: `Official website of ${domain}. Learn more about our services, products, and company information. Contact us for more details.`,
        position: 1
      },
      {
        title: `About Us - ${domain}`,
        url: `https://${domain}/about`,
        description: `Learn about ${domain}'s history, mission, and team. We've been serving customers since 2020 with quality products and services.`,
        position: 2
      },
      {
        title: `Contact ${domain} - Get in Touch`,
        url: `https://${domain}/contact`,
        description: `Contact ${domain} for inquiries, support, or business opportunities. Multiple ways to reach us including phone, email, and contact form.`,
        position: 3
      }
    ];

    // Sometimes return empty results to demonstrate no-results state
    if (domain.includes('test') || domain.includes('fake')) {
      return [];
    }

    return mockResults;
  }

  function analyzeResults(results: SERPResult[]) {
    const tips: string[] = [];
    
    results.forEach((result, index) => {
      const titleLength = result.title.length;
      const descLength = result.description.length;
      
      if (titleLength > 60) {
        tips.push(`Result ${index + 1}: Title is ${titleLength} characters (recommended: 50-60). Consider shortening.`);
      }
      
      if (descLength > 160) {
        tips.push(`Result ${index + 1}: Description is ${descLength} characters (recommended: 150-160). Consider shortening.`);
      }
      
      if (titleLength < 30) {
        tips.push(`Result ${index + 1}: Title might be too short (${titleLength} chars). Consider adding more descriptive keywords.`);
      }
      
      if (descLength < 120) {
        tips.push(`Result ${index + 1}: Description could be longer (${descLength} chars). Add more compelling details.`);
      }
    });

    if (tips.length === 0) {
      tips.push('âœ… Your current SERP results look well-optimized!');
    }

    return tips;
  }

  function getStatusClass(length: number, type: 'title' | 'description'): string {
    if (type === 'title') {
      if (length <= 60) return 'status-good';
      if (length <= 70) return 'status-warning';
      return 'status-error';
    } else {
      if (length <= 160) return 'status-good';
      if (length <= 180) return 'status-warning';
      return 'status-error';
    }
  }

  function renderResults(results: SERPResult[]) {
    resultsContainer.innerHTML = results.map(result => `
      <div class="serp-result">
        <div class="serp-result-url">${result.url}</div>
        <h5 class="serp-result-title">${result.title}</h5>
        <p class="serp-result-description">${result.description}</p>
        <div class="result-stats">
          <div class="stat-item">
            <span class="status-indicator ${getStatusClass(result.title.length, 'title')}"></span>
            <span>Title: ${result.title.length} chars</span>
          </div>
          <div class="stat-item">
            <span class="status-indicator ${getStatusClass(result.description.length, 'description')}"></span>
            <span>Description: ${result.description.length} chars</span>
          </div>
          <div class="stat-item">
            <span>Position: #${result.position}</span>
          </div>
        </div>
      </div>
    `).join('');

    // Show optimization tips
    const tips = analyzeResults(results);
    optimizationTips.innerHTML = tips.map(tip => `<div>â€¢ ${tip}</div>`).join('');
    comparisonView.classList.remove('hidden');
  }

  async function performSearch() {
    const domain = domainInput.value.trim();
    
    if (!domain) {
      alert('Please enter a domain name');
      return;
    }

    // Clean domain input
    const cleanDomain = domain.replace(/^https?:\/\//, '').replace(/\/$/, '');
    
    // Show loading state
    searchResults.classList.remove('hidden');
    loadingState.classList.remove('hidden');
    resultsContainer.innerHTML = '';
    noResults.classList.add('hidden');
    comparisonView.classList.add('hidden');
    
    searchBtn.disabled = true;
    searchBtn.textContent = 'Searching...';

    try {
      const results = await fetchSERPResults(cleanDomain);
      
      loadingState.classList.add('hidden');
      
      if (results.length === 0) {
        noResults.classList.remove('hidden');
      } else {
        renderResults(results);
      }
    } catch (error) {
      console.error('Search error:', error);
      loadingState.classList.add('hidden');
      noResults.classList.remove('hidden');
    } finally {
      searchBtn.disabled = false;
      searchBtn.textContent = 'Search';
    }
  }

  // Event listeners
  searchBtn.addEventListener('click', performSearch);
  
  domainInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      performSearch();
    }
  });

  // Auto-detect current domain if possible
  if (typeof window !== 'undefined') {
    const currentDomain = window.location.hostname;
    if (currentDomain && currentDomain !== 'localhost') {
      domainInput.value = currentDomain;
    }
  }
</script>